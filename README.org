* Stream Transformation in Elm
This project tests out some ideas for stream transformation as I read
and contribute to kmonad. Elm makes testing these ideas easy because
it comes with a builtin UI: you initialize some state (`init`) and
define a function (`update`) that changes that state and produces some
output each time an event is received.

Note: Elm builds to JS and therefore is typically used for web
development. However, by passing events to and from a node.js repl,
you can easily use Elm for a simple, command-line type
applicatioin. For this project I built directly off of a boilerplate
starter called Platform.worker written by @jxxcarlson to demonstrate
the propensity for Elm to be used in a command-line scenario.

** To run
#+begin_src bash
$ sh make.sh
$ node src/repl.js
#+end_src

** What I'm Trying Out
My primary motivating idea is to model transformation as the passing
of events through a stack of user-defined layers. At first I imagined
that each layer could itself manipulate the stack, in addition to
being able to emit events to other layers for propogation up (and
down, around, etc) the stack. To start, I have just implemented each
layer to manage its own piece of state and to emit events, instead of
managing the entire layer stack as state.

At the moment I have two ideas as to how one might allow stack layers
to manipulate the rest of the stack:

- Construct an algebra of layer stack operations and allow the layer
  to emit a list of desired layer stack operations
- Pass the entire layer stack to each layer and allow direct manipulation

** Sending an event back through the stack
I don't have a rigorous definition for what requirements a "stream
transformer" API would have to meet in order to allow any arbitrary
transformation. That being said, I have a hunch that under my
layer model such an API would have to allow a layer to send events
back to itself. There are a few ways to do this "loopback" of events:

- Using ports through the JS runtime: Elm sends an event through a
  special port, and JS initializes a dedicated listener that passes
  all events from this port back through the standard port to Elm
- Using the Elm runtime: output a `Cmd Msg` in `update` that will be
  received by `update` shortly. See
  https://medium.com/elm-shorts/how-to-turn-a-msg-into-a-cmd-msg-in-elm-5dd095175d84
  for discussion of this method.
- Direct recursion: while running `update`, invoke `update` again

** Thoughts about Elm
The way I'm using Elm--which is to dive deeper into learning typing
and functional programming--it's basically just worse Haskell. Little
things are missing--like pattern matching on arguments--and so are
bigger things: monad tranformers, typeclasses, language
extensions... I admire the ambition to make functional programming
simple and accessible, but I wonder to what extent the value of
functional programming is the process of grappling with esoteric
abstract types.

** What I've learned
*** A function can't output a replacement for itself
An interesting loop arises if you want allow a layer to (output events
and) directly "replace itself" like so:

#+begin_src haskell
Event -> State -> (List Event, (Event -> State -> (List Event, ...))
#+end_src

An infinite type!
*** Where do you put your complexity?
When I first discovered functional programming, I thought it was a
Silver Bullet. Monads sure sound cool and fancy; they can probably
abstract all of the complexity out of my problem! But of course not:
when I actually tried reading nontrivial Haskell (in kmonad), I
realized that complexity hasn't disappeared in functional code, it has
just changed its form. Indeed, finding good types to model your
scenario is very hard. The complexity I thought I had eliminated by
choosing a simple model (layer stack) is already reemerging in my
implementation of tapNextRelease, and will probably continue to do so
if I reimplement layers to allow manipulation of the stack. Perhaps
the very idea of layers and a stack of layers is an object-oriented
abstraction written in functional code.
